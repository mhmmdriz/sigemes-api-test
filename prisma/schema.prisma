// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  bigint   = "number"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Gender {
  perempuan
  laki_laki
}

model Renter {
  id                     Int       @id @default(autoincrement())
  email                  String    @unique @db.VarChar(255)
  password               String    @db.VarChar(255)
  fullname               String    @db.VarChar(60)
  phoneNumber            String    @map("phone_number") @db.VarChar(15)
  gender                 Gender
  profilePicture         String    @default("http://localhost:8080/uploads/profile-pictures/default-picture.png") @map("profile_picture")
  emailVerified          Boolean   @default(false) @map("email_verified")
  otp                    String?   @db.VarChar(5)
  otpExpiry              DateTime? @map("otp_expiry")
  forgotPasswordVerified Boolean   @default(false) @map("forgot_password_verified")
  createdAt              DateTime  @default(now()) @map("created_at")
  updatedAt              DateTime  @updatedAt @map("updated_at")
  Rent                   Rent[]

  @@map("renters")
}

model Admin {
  id             Int           @id @default(autoincrement())
  email          String        @unique @db.VarChar(255)
  password       String        @db.VarChar(255)
  fullname       String        @db.VarChar(60)
  phoneNumber    String        @map("telephone_number") @db.VarChar(15)
  isSuperAdmin   Boolean       @default(false) @map("is_super_admin")
  profilePicture String        @default("http://localhost:8080/uploads/profile-pictures/default-picture.png") @map("profile_picture")
  createdAt      DateTime      @default(now()) @map("created_at")
  updatedAt      DateTime      @updatedAt @map("updated_at")
  ReviewReply    ReviewReply[]

  @@map("admins")
}

enum Status {
  tersedia
  tidak_tersedia
}

model CityHall {
  id              Int               @id @default(autoincrement())
  name            String            @db.VarChar(50)
  description     String            @db.Text
  areaM2          Float             @map("area_m2") @db.DoublePrecision
  peopleCapacity  Int               @map("people_capacity") @db.Integer
  address         String            @db.VarChar(255)
  latitude        Float             @db.DoublePrecision
  longitude       Float             @db.DoublePrecision
  status          Status            @default(tersedia) @map("city_hall_status")
  contactPerson   String            @map("contact_person") @db.VarChar(15)
  cityHallMedia   CityHallMedia[]
  cityHallPricing CityHallPricing[]

  @@map("city_halls")
}

model CityHallMedia {
  id         Int      @id @default(autoincrement())
  cityHall   CityHall @relation(fields: [cityHallId], references: [id], onDelete: Cascade)
  cityHallId Int      @map("city_hall_id")
  url        String

  @@map("city_hall_media")
}

model CityHallPricing {
  id           Int      @id @default(autoincrement())
  cityHall     CityHall @relation(fields: [cityHallId], references: [id], onDelete: Cascade)
  cityHallId   Int      @map("city_hall_id")
  activityType String   @map("activity_type") @db.VarChar(50)
  facilities   String   @db.Text
  pricePerDay  Float    @map("price_per_day") @db.DoublePrecision
  isActive     Boolean  @default(true) @map("is_active")
  Rent         Rent[]

  @@map("city_hall_pricings")
}

model Guesthouse {
  id              Int               @id @default(autoincrement())
  name            String            @db.VarChar(50)
  description     String            @db.Text
  facilities      String            @db.Text
  areaM2          Float             @map("area_m2") @db.DoublePrecision
  address         String            @db.VarChar(255)
  latitude        Float             @db.DoublePrecision
  longitude       Float             @db.DoublePrecision
  contactPerson   String            @map("contact_person") @db.VarChar(15)
  guesthouseMedia GuesthouseMedia[]
  guesthouseRoom  GuesthouseRoom[]

  @@map("guesthouses")
}

model GuesthouseMedia {
  id           Int        @id @default(autoincrement())
  guesthouse   Guesthouse @relation(fields: [guesthouseId], references: [id], onDelete: Cascade)
  guesthouseId Int        @map("guesthouse_id")
  url          String

  @@map("guesthouse_media")
}

enum RoomType {
  vip
  standard
}

model GuesthouseRoom {
  id                    Int                     @id @default(autoincrement())
  guesthouse            Guesthouse              @relation(fields: [guesthouseId], references: [id], onDelete: Cascade)
  guesthouseId          Int                     @map("guesthouse_id")
  name                  String                  @db.VarChar(50)
  type                  RoomType                @default(standard)
  facilities            String                  @db.Text
  totalSlot             Int                     @map("total_slot") @db.Integer
  areaM2                Float                   @map("area_m2") @db.DoublePrecision
  guesthouseRoomMedia   GuesthouseRoomMedia[]
  guesthouseRoomPricing GuesthouseRoomPricing[]

  @@map("guesthouse_rooms")
}

model GuesthouseRoomMedia {
  id               Int            @id @default(autoincrement())
  guesthouseRoom   GuesthouseRoom @relation(fields: [guesthouseRoomId], references: [id], onDelete: Cascade)
  guesthouseRoomId Int            @map("guesthouse_room_id")
  url              String

  @@map("guesthouse_room_media")
}

model GuesthouseRoomPricing {
  id               Int            @id @default(autoincrement())
  guesthouseRoom   GuesthouseRoom @relation(fields: [guesthouseRoomId], references: [id], onDelete: Cascade)
  guesthouseRoomId Int            @map("guesthouse_room_id")
  retributionType  String         @map("retribution_type") @db.VarChar(100)
  pricePerDay      Float          @map("price_per_day") @db.DoublePrecision
  isActive         Boolean        @default(true) @map("is_active")
  Rent             Rent[]

  @@map("guesthouse_room_pricings")
}

enum RentStatus {
  pending
  dikonfirmasi
  dibatalkan
  selesai
}

model Rent {
  id                      Int                    @id @default(autoincrement())
  renterId                Int                    @map("renter_id")
  guesthouseRoomPricingId Int?                   @map("guesthouse_room_pricing_id")
  cityHallPricingId       Int?                   @map("city_hall_pricing_id")
  slot                    Int                    @default(1)
  startDate               DateTime               @map("start_date")
  endDate                 DateTime               @map("end_date")
  renterGender            Gender                 @map("renter_gender")
  checkIn                 DateTime?              @map("check_in")
  checkOut                DateTime?              @map("check_out")
  status                  RentStatus             @default(pending) @map("status")
  createdAt               DateTime               @default(now()) @map("created_at")
  updatedAt               DateTime               @updatedAt @map("updated_at")
  renter                  Renter                 @relation(fields: [renterId], references: [id], onDelete: Cascade)
  guesthouseRoomPricing   GuesthouseRoomPricing? @relation(fields: [guesthouseRoomPricingId], references: [id], onDelete: Cascade)
  cityHallPricing         CityHallPricing?       @relation(fields: [cityHallPricingId], references: [id], onDelete: Cascade)
  payment                 Payment?
  review                  Review?

  // Index untuk query guesthouseRoomPricingId + tanggal
  @@index([guesthouseRoomPricingId, startDate, endDate], name: "idx_rent_guesthouse_date")

  // Index untuk query cityHallPricingId + tanggal
  @@index([cityHallPricingId, startDate, endDate], name: "idx_rent_cityhall_date")

  @@map("rents")
}

enum PaymentStatus {
  pending
  dibayar
  gagal
}

model Payment {
  id                  String        @id @default(uuid()) @db.Uuid
  rentId              Int           @unique @map("rent_id")
  amount              Int
  method              String?       @db.VarChar(50)
  status              PaymentStatus @default(pending)
  paymentGatewayToken String?       @map("payment_gateway_token") @db.VarChar(255)
  paymentTriggeredAt  DateTime?     @map("payment_triggered_at")
  paymentConfirmedAt  DateTime?     @map("payment_confirmed_at")
  Rent                Rent          @relation(fields: [rentId], references: [id], onDelete: Cascade)

  @@map("payments")
}

model Review {
  id          Int           @id @default(autoincrement())
  rentId      Int           @map("rent_id") @unique
  rating      Int
  comment     String        @db.Text
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt @map("updated_at")
  rent        Rent          @relation(fields: [rentId], references: [id], onDelete: Cascade)
  reviewMedia ReviewMedia[]
  reviewReply ReviewReply?

  @@map("reviews")
}

model ReviewMedia {
  id       Int    @id @default(autoincrement())
  reviewId Int    @map("review_id")
  url      String
  review   Review @relation(fields: [reviewId], references: [id], onDelete: Cascade)

  @@map("review_media")
}

model ReviewReply {
  id        Int      @id @default(autoincrement())
  reviewId  Int      @map("review_id") @unique
  adminId   Int      @map("admin_id")
  comment   String   @db.Text
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  review    Review   @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  admin     Admin    @relation(fields: [adminId], references: [id], onDelete: Cascade)

  @@map("review_replies")
}
